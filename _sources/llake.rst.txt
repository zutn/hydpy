llake

The L-Lake model defines the methods and classes required for
performing lake and dam retention processes as implemented in LARSIM.

Model features

class hydpy.models.llake.llake_model.Model

   Bases:

   hydpy.core.modeltools.Model

   Base model for HydPy-L-Lake.

   The following "run methods" are called each simulation step run in
   the given sequence:
      solve_dv_dt_v1() Solve the differential equation of HydPy-L.

      interp_w_v1() Calculate the actual water stage based on linear
      interpolation.

      corr_dw_v1() Adjust the water stage drop to the highest value
      allowed and correct the associated fluxes.

      modify_qa_v1() Add water to or remove water from the calculated
      lake outflow.

   The following "additional methods" are called by at least one "run
   method":
      interp_v_v1() Calculate the actual water volume based on linear
      interpolation.

      calc_vq_v1() Calculate the auxiliary term.

      interp_qa_v1() Calculate the lake outflow based on linear
      interpolation.

      calc_v_qa_v1() Update the stored water volume based on the
      equation of continuity.

   The following "inlet update methods" are called in the given
   sequence immediately  before solving the differential equations of
   the respective model:
      pick_q_v1() Update the inlet link sequence.

   The following "outlet update methods" are called in the given
   sequence immediately  after solving the differential equations of
   the respective model:
      pass_q_v1() Update the outlet link sequence.

hydpy.models.llake.llake_model.solve_dv_dt_v1(self)

   Solve the differential equation of HydPy-L.

   At the moment, HydPy-L only implements a simple numerical solution
   of its underlying ordinary differential equation.  To increase the
   accuracy (or sometimes even to prevent instability) of this
   approximation, one can set the value of parameter

   MaxDT

    to a value smaller than the actual simulation step size.  Method

   solve_dv_dt_v1()

    then applies the methods related to the numerical approximation
   multiple times and aggregates the results.

   Note that the order of convergence is one only.  It is hard to tell
   how short the internal simulation step needs to be to ensure a
   certain degree of accuracy.  In most cases one hour or very often
   even one day should be sufficient to gain acceptable results.
   However, this strongly depends on the given water stage-volume-
   discharge relationship.  Hence it seems advisable to always define
   a few test waves and apply the llake model with different

   MaxDT

    values.  Afterwards, select a

   MaxDT

    value  lower than one which results in acceptable approximations
   for all test waves.  The computation time of the llake mode per
   substep is rather small, so always include a safety factor.

   Of course, an adaptive step size determination would be much more
   convenient...

   Required derived parameter:
      NmbSubsteps

   Used aide sequence:
      V


      QA

   Updated state sequence:
      V

   Calculated flux sequence:
      QA

   Note that method

   solve_dv_dt_v1()

    calls the versions of *calc_vq*, *interp_qa* and *calc_v_qa*
   selected by the respective application model. Hence, also their
   parameter and sequence specifications need to be considered.

   Basic equation:
      \frac{dV}{dt}= QZ - QA(V)

hydpy.models.llake.llake_model.calc_vq_v1(self)

   Calculate the auxiliary term.

   Required derived parameters:
      Seconds


      NmbSubsteps

   Required flux sequence:
      QZ

   Required aide sequence:
      V

   Calculated aide sequence:
      VQ

   Basic equation:
      VQ = 2 \cdot V + \frac{Seconds}{NmbSubsteps} \cdot QZ

   Example:

      The following example shows that the auxiliary term *vq* does
      not depend on the (outer) simulation step size but on the
      (inner) calculation step size defined by parameter *maxdt*:

      >>> from hydpy.models.llake import *
      >>> parameterstep('1d')
      >>> simulationstep('12h')
      >>> maxdt('6h')
      >>> derived.seconds.update()
      >>> derived.nmbsubsteps.update()
      >>> fluxes.qz = 2.
      >>> aides.v = 1e5
      >>> model.calc_vq_v1()
      >>> aides.vq
      vq(243200.0)

hydpy.models.llake.llake_model.interp_qa_v1(self)

   Calculate the lake outflow based on linear interpolation.

   Required control parameters:
      N


      Q

   Required derived parameters:
      TOY


      VQ

   Required aide sequence:
      VQ

   Calculated aide sequence:
      QA

   Examples:

      In preparation for the following examples, define a short
      simulation time period with a simulation step size of 12 hours
      and initialize the required model object:

      >>> from hydpy import pub
      >>> from hydpy import Timegrids, Timegrid
      >>> pub.timegrids = Timegrids(Timegrid('2000.01.01',
      ...                                    '2000.01.04',
      ...                                    '12h'))
      >>> from hydpy.models.llake import *
      >>> parameterstep()

      Next, for the sake of brevity, define a test function:

      >>> def test(*vqs):
      ...     for vq in vqs:
      ...         aides.vq(vq)
      ...         model.interp_qa_v1()
      ...         print(repr(aides.vq), repr(aides.qa))

      The following three relationships between the auxiliary term
      *vq* and the tabulated discharge *q* are taken as examples.
      Each one is valid for one of the first three days in January and
      is defined via five nodes:

      >>> n(5)
      >>> derived.toy.update()
      >>> derived.vq(_1_1_6=[0., 1., 2., 2., 3.],
      ...            _1_2_6=[0., 1., 2., 2., 3.],
      ...            _1_3_6=[0., 1., 2., 3., 4.])
      >>> q(_1_1_6=[0., 0., 0., 0., 0.],
      ...   _1_2_6=[0., 2., 5., 6., 9.],
      ...   _1_3_6=[0., 2., 1., 3., 2.])

      In the first example, discharge does not depend on the actual
      value of the auxiliary term and is always zero:

      >>> model.idx_sim = pub.timegrids.init['2000.01.01']
      >>> test(0., .75, 1., 4./3., 2., 7./3., 3., 10./3.)
      vq(0.0) qa(0.0)
      vq(0.75) qa(0.0)
      vq(1.0) qa(0.0)
      vq(1.333333) qa(0.0)
      vq(2.0) qa(0.0)
      vq(2.333333) qa(0.0)
      vq(3.0) qa(0.0)
      vq(3.333333) qa(0.0)

      The seconds example demonstrates that relationships are allowed
      to contain jumps, which is the case for the (*vq*,`q`) pairs
      (2,6) and (2,7).  Also it demonstrates that when the highest
      *vq* value is exceeded linear extrapolation based on the two
      highest (*vq*,`q`) pairs is performed:

      >>> model.idx_sim = pub.timegrids.init['2000.01.02']
      >>> test(0., .75, 1., 4./3., 2., 7./3., 3., 10./3.)
      vq(0.0) qa(0.0)
      vq(0.75) qa(1.5)
      vq(1.0) qa(2.0)
      vq(1.333333) qa(3.0)
      vq(2.0) qa(5.0)
      vq(2.333333) qa(7.0)
      vq(3.0) qa(9.0)
      vq(3.333333) qa(10.0)

      The third example shows that the relationships do not need to be
      arranged monotonously increasing.  Particualarly for the
      extrapolation range, this could result in negative values of
      *qa*, which is avoided by setting it to zero in such cases:

      >>> model.idx_sim = pub.timegrids.init['2000.01.03']
      >>> test(.5, 1.5, 2.5, 3.5, 4.5, 10.)
      vq(0.5) qa(1.0)
      vq(1.5) qa(1.5)
      vq(2.5) qa(2.0)
      vq(3.5) qa(2.5)
      vq(4.5) qa(1.5)
      vq(10.0) qa(0.0)

hydpy.models.llake.llake_model.calc_v_qa_v1(self)

   Update the stored water volume based on the equation of continuity.

   Note that for too high outflow values, which would result in
   overdraining the lake, the outflow is trimmed.

   Required derived parameters:
      Seconds


      NmbSubsteps

   Required flux sequence:
      QZ

   Updated aide sequences:
      QA


      V

   Basic Equation:
      \frac{dV}{dt}= QZ - QA

   Examples:

      Prepare a lake model with an initial storage of 100.000 mÂ³ and
      an inflow of 2 mÂ³/s and a (potential) outflow of 6 mÂ³/s:

      >>> from hydpy.models.llake import *
      >>> parameterstep()
      >>> simulationstep('12h')
      >>> maxdt('6h')
      >>> derived.seconds.update()
      >>> derived.nmbsubsteps.update()
      >>> aides.v = 1e5
      >>> fluxes.qz = 2.
      >>> aides.qa = 6.

      Through calling method *calc_v_qa_v1* three times with the same
      inflow and outflow values, the storage is emptied after the
      second step and outflow is equal to inflow after the third step:

      >>> model.calc_v_qa_v1()
      >>> aides.v
      v(13600.0)
      >>> aides.qa
      qa(6.0)
      >>> model.new2old()
      >>> model.calc_v_qa_v1()
      >>> aides.v
      v(0.0)
      >>> aides.qa
      qa(2.62963)
      >>> model.new2old()
      >>> model.calc_v_qa_v1()
      >>> aides.v
      v(0.0)
      >>> aides.qa
      qa(2.0)

      Note that the results of method

      calc_v_qa_v1()

       are not based depend on the (outer) simulation step size but on
      the (inner) calculation step size defined by parameter *maxdt*.

hydpy.models.llake.llake_model.interp_w_v1(self)

   Calculate the actual water stage based on linear interpolation.

   Required control parameters:
      N


      V


      W

   Required state sequence:
      V

   Calculated state sequence:
      W

   Examples:

      Prepare a model object:

      >>> from hydpy.models.llake import *
      >>> parameterstep('1d')
      >>> simulationstep('12h')

      For the sake of brevity, define a test function:

      >>> def test(*vs):
      ...     for v in vs:
      ...         states.v.new = v
      ...         model.interp_w_v1()
      ...         print(repr(states.v), repr(states.w))

      Define a simple *w*-*v* relationship consisting of three nodes
      and calculate the water stages for different volumes:

      >>> n(3)
      >>> v(0., 2., 4.)
      >>> w(-1., 1., 2.)

      Perform the interpolation for a few test points:

      >>> test(0., .5, 2., 3., 4., 5.)
      v(0.0) w(-1.0)
      v(0.5) w(-0.5)
      v(2.0) w(1.0)
      v(3.0) w(1.5)
      v(4.0) w(2.0)
      v(5.0) w(2.5)

      The reference water stage of the relationship can be selected
      arbitrarily.  Even negative water stages are returned, as is
      demonstrated by the first two calculations.  For volumes outside
      the range of the (*v*,`w`) pairs, the outer two highest pairs
      are used for linear extrapolation.

hydpy.models.llake.llake_model.interp_v_v1(self)

   Calculate the actual water volume based on linear interpolation.

   Required control parameters:
      N


      V


      W

   Required state sequence:
      W

   Calculated state sequence:
      V

   Examples:

      Prepare a model object:

      >>> from hydpy.models.llake import *
      >>> parameterstep('1d')
      >>> simulationstep('12h')

      For the sake of brevity, define a test function:

      >>> def test(*ws):
      ...     for w in ws:
      ...         states.w.new = w
      ...         model.interp_v_v1()
      ...         print(repr(states.w), repr(states.v))

      Define a simple *v*-*w* relationship consisting of three nodes
      and calculate the water stages for different volumes:

      >>> n(3)
      >>> w(-1., 1., 2.)
      >>> v(0., 2., 4.)

      Perform the interpolation for a few test points:

      >>> test(-1., -.5, 1., 1.5, 2., 2.5)
      w(-1.0) v(0.0)
      w(-0.5) v(0.5)
      w(1.0) v(2.0)
      w(1.5) v(3.0)
      w(2.0) v(4.0)
      w(2.5) v(5.0)

      The reference water stage of the relationship can be selected
      arbitrarily, hence even the negative water contained in the
      given example is allowed.  For volumes outside the range of the
      (*w*,`v`) pairs, the outer two highest pairs are used for linear
      extrapolation.

hydpy.models.llake.llake_model.corr_dw_v1(self)

   Adjust the water stage drop to the highest value allowed and
   correct the associated fluxes.

   Note that method

   corr_dw_v1()

    calls the method *interp_v* of the respective application model.
   Hence the requirements of the actual *interp_v* need to be
   considered additionally.

   Required control parameter:
      MaxDW

   Required derived parameters:
      TOY


      Seconds

   Required flux sequence:
      QZ

   Updated flux sequence:
      QA

   Updated state sequences:
      W


      V

   Basic Restriction:
      W_{old} - W_{new} \leq MaxDW

   Examples:

      In preparation for the following examples, define a short
      simulation time period with a simulation step size of 12 hours
      and initialize the required model object:

      >>> from hydpy import pub
      >>> from hydpy import Timegrids, Timegrid
      >>> pub.timegrids = Timegrids(Timegrid('2000.01.01',
      ...                                    '2000.01.04',
      ...                                    '12h'))
      >>> from hydpy.models.llake import *
      >>> parameterstep('1d')
      >>> derived.toy.update()
      >>> derived.seconds.update()

      Select the first half of the second day of January as the
      simulation step relevant for the following examples:

      >>> model.idx_sim = pub.timegrids.init['2000.01.02']

      The following tests are based on method

      interp_v_v1()

       for the interpolation of the stored water volume based on the
      corrected water stage:

      >>> model.interp_v = model.interp_v_v1

      For the sake of simplicity, the underlying *w*-*v* relationship
      is assumed to be linear:

      >>> n(2.)
      >>> w(0., 1.)
      >>> v(0., 1e6)

      The maximum drop in water stage for the first half of the second
      day of January is set to 0.4 m/d.  Note that, due to the
      difference between the parameter step size and the simulation
      step size, the actual value used for calculation is 0.2 m/12h:

      >>> maxdw(_1_1_18=.1,
      ...       _1_2_6=.4,
      ...       _1_2_18=.1)
      >>> maxdw
      maxdw(toy_1_1_18_0_0=0.1,
            toy_1_2_6_0_0=0.4,
            toy_1_2_18_0_0=0.1)
      >>> from hydpy import round_
      >>> round_(maxdw.value[2])
      0.2

      Define old and new water stages and volumes in agreement with
      the given linear relationship:

      >>> states.w.old = 1.
      >>> states.v.old = 1e6
      >>> states.w.new = .9
      >>> states.v.new = 9e5

      Also define an inflow and an outflow value.  Note the that the
      latter is set to zero, which is inconsistent with the actual
      water stage drop defined above, but done for didactic reasons:

      >>> fluxes.qz = 1.
      >>> fluxes.qa = 0.

      Calling the

      corr_dw_v1()

       method does not change the values of either of following
      sequences, as the actual drop (0.1 m/12h) is smaller than the
      allowed drop (0.2 m/12h):

      >>> model.corr_dw_v1()
      >>> states.w
      w(0.9)
      >>> states.v
      v(900000.0)
      >>> fluxes.qa
      qa(0.0)

      Note that the values given above are not recalculated, which can
      clearly be seen for the lake outflow, which is still zero.

      Through setting the new value of the water stage to 0.6 m, the
      actual drop (0.4 m/12h) exceeds the allowed drop (0.2 m/12h).
      Hence the water stage is trimmed and the other values are
      recalculated:

      >>> states.w.new = .6
      >>> model.corr_dw_v1()
      >>> states.w
      w(0.8)
      >>> states.v
      v(800000.0)
      >>> fluxes.qa
      qa(5.62963)

      Through setting the maximum water stage drop to zero, method

      corr_dw_v1()

       is effectively disabled.  Regardless of the actual change in
      water stage, no trimming or recalculating is performed:

      >>> maxdw.toy_01_02_06 = 0.
      >>> states.w.new = .6
      >>> model.corr_dw_v1()
      >>> states.w
      w(0.6)
      >>> states.v
      v(800000.0)
      >>> fluxes.qa
      qa(5.62963)

hydpy.models.llake.llake_model.modify_qa_v1(self)

   Add water to or remove water from the calculated lake outflow.

   Required control parameter:
      Verzw

   Required derived parameter:
      TOY

   Updated flux sequence:
      QA

   Basic Equation:
      QA = QA* - Verzw

   Examples:
      In preparation for the following examples, define a short
      simulation time period with a simulation step size of 12 hours
      and initialize the required model object:

      >>> from hydpy import pub
      >>> from hydpy import Timegrids, Timegrid
      >>> pub.timegrids = Timegrids(Timegrid('2000.01.01',
      ...                                    '2000.01.04',
      ...                                    '12h'))
      >>> from hydpy.models.llake import *
      >>> parameterstep('1d')
      >>> derived.toy.update()

      Select the first half of the second day of January as the
      simulation step relevant for the following examples:

      >>> model.idx_sim = pub.timegrids.init['2000.01.02']

      Assume that, in accordance with previous calculations, the
      original outflow value is 3 mÂ³/s:

      >>> fluxes.qa = 3.

      Prepare the shape of parameter *verzw* (usually, this is done
      automatically when calling parameter *n*): >>> verzw.shape =
      (None,)

      Set the value of the abstraction on the first half of the second
      day of January to 2 mÂ³/s:

      >>> verzw(_1_1_18=0.,
      ...       _1_2_6=2.,
      ...       _1_2_18=0.)

      In the first example *verzw* is simply subtracted from *qa*:

      >>> model.modify_qa_v1()
      >>> fluxes.qa
      qa(1.0)

      In the second example *verzw* exceeds *qa*, resulting in a zero
      outflow value:

      >>> model.modify_qa_v1()
      >>> fluxes.qa
      qa(0.0)

      The last example demonstrates, that "negative abstractions" are
      allowed, resulting in an increase in simulated outflow:

      >>> verzw.toy_1_2_6 = -2.
      >>> model.modify_qa_v1()
      >>> fluxes.qa
      qa(2.0)

hydpy.models.llake.llake_model.pick_q_v1(self)

   Update the inlet link sequence.

hydpy.models.llake.llake_model.pass_q_v1(self)

   Update the outlet link sequence.

Parameter features

Control parameters

class hydpy.models.llake.llake_control.ControlParameters(pars, cls_fastaccess=None, cymodel=None)

   Bases:

   hydpy.core.parametertools.SubParameters

   Control parameters of HydPy-L-Lake, directly defined by the user.

   The following parameter classes are selected:
      N Anzahl InterpolationsstÃ¼tzstellen (number of nodes for the
      interpolation between water state, volume and discharge) [-].

      W Wasserstand (water stage) [m].

      V Wasservolumen bei vorgegebenem Wasserstand (water volume for a
      given water stage) [mÂ³].

      Q Ãblicher Seeausfluss bei vorgegebenem Wasserstand (sea outlet
      discharge for a given water stage) [mÂ³/s].

      MaxDT Maximale interne Rechenschrittweite (maximum of the
      internal step size) [T].

      MaxDW Maximale Absenkgeschwindigkeit (maximum drop in water
      level) [m/T].

      Verzw Zu- oder Abschlag des Seeausflusses (addition to or
      abstraction from the seas outlet discharge) [mÂ³/s].

class hydpy.models.llake.llake_control.N

   Bases:

   hydpy.core.parametertools.SingleParameter

   Anzahl InterpolationsstÃ¼tzstellen (number of nodes for the
   interpolation between water state, volume and discharge) [-].

   Parameter

   N

    determines the length of all 1- and 2-dimensional parameters of
   HydPy-L-Lake.  This requires that the value of the respective

   N

    instance is set before any of the values of these 1- and
   2-dimensional parameters are set.  Changing the value of the

   N

    instance necessitates setting their values again.

   Examples:

      >>> from hydpy.models.llake import *
      >>> parameterstep('1d')
      >>> simulationstep('12h')
      >>> n(5)

      For "simple" 1-dimensional parameters, the shape depends on the
      value of

      N

       only:

      >>> w.shape
      (5,)

      For time varying parameters (derived from

      SeasonalParameter

      ), it also depends on the defined number simulation steps per
      leap year:

      >>> verzw.shape
      (732,)
      >>> q.shape
      (732, 5)

   NDIM = 0

   TYPE

      alias of "builtins.int"

   TIME = None

   SPAN = (2, None)

class hydpy.models.llake.llake_control.W

   Bases:

   hydpy.core.parametertools.MultiParameter

   Wasserstand (water stage) [m].

   NDIM = 1

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (None, None)

class hydpy.models.llake.llake_control.V

   Bases:

   hydpy.core.parametertools.MultiParameter

   Wasservolumen bei vorgegebenem Wasserstand (water volume for a
   given water stage) [mÂ³].

   NDIM = 1

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

class hydpy.models.llake.llake_control.Q

   Bases:

   hydpy.core.parametertools.SeasonalParameter

   Ãblicher Seeausfluss bei vorgegebenem Wasserstand (sea outlet
   discharge for a given water stage) [mÂ³/s].

   NDIM = 2

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

class hydpy.models.llake.llake_control.MaxDT

   Bases:

   hydpy.core.parametertools.SingleParameter

   Maximale interne Rechenschrittweite (maximum of the internal step
   size) [T].

   Examples:

      Initialize a llake model and set different time step length for
      parameterstep, simulationstep and maxdt:

      >>> from hydpy.models.llake import *
      >>> parameterstep('1d')
      >>> simulationstep('12h')
      >>> maxdt('1h')

      Internally, the value of maxdt is stored in seconds, but in
      string representations it is shown as a

      Period

       string:

      >>> maxdt.value
      3600.0
      >>> maxdt
      maxdt('1h')

      Note that maxdt only defines the maximum internal step size, not
      the one actually used.  Hence, maxdt is e.g. allowed to be
      larger than the actual simulation step size:

      >>> maxdt('2d')
      >>> maxdt
      maxdt('2d')

      It is allowed the set the number of seconds directly or modify
      it by mathematical operations:

      >>> maxdt.value = 60.
      >>> maxdt
      maxdt('1m')
      >>> maxdt *= 120.
      >>> maxdt
      maxdt('2h')

      However, for the more secure way of calling the object trying to
      pass an argument which cannot be converted to a Period instance
      unambiguously results in an exception:

      >>> maxdt(60.)
      Traceback (most recent call last):
      ...
      ValueError: While trying the set the value of parameter `maxdt` of the lake model handled by element `?`, the following error occured: The supplied argument must be either an instance of `datetime.timedelta` or `str`.  The given arguments type is float. (An example: set `max dt` to 3600 seconds by writing `maxdt("1h"))

   NDIM = 0

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

class hydpy.models.llake.llake_control.MaxDW

   Bases:

   hydpy.core.parametertools.SeasonalParameter

   Maximale Absenkgeschwindigkeit (maximum drop in water level) [m/T].

   NDIM = 1

   TYPE

      alias of "builtins.float"

   TIME = True

   SPAN = (0.0, None)

class hydpy.models.llake.llake_control.Verzw

   Bases:

   hydpy.core.parametertools.SeasonalParameter

   Zu- oder Abschlag des Seeausflusses (addition to or abstraction
   from the seas outlet discharge) [mÂ³/s].

   NDIM = 1

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (None, None)

Derived parameters

class hydpy.models.llake.llake_derived.DerivedParameters(pars, cls_fastaccess=None, cymodel=None)

   Bases:

   hydpy.core.parametertools.SubParameters

   Derived parameters of HydPy-L-Lake, indirectly defined by the user.

   The following parameter classes are selected:
      TOY References the "global" time of the year index array [-].

      Seconds Length of the actual simulation step size in seconds
      [s].

      NmbSubsteps Number of the internal simulation steps [-].

      VQ Hilfsterm (auxiliary term): math:VdtQ = 2 cdot + dt cdot Q`
      [mÂ³].

class hydpy.models.llake.llake_derived.TOY

   Bases:

   hydpy.core.parametertools.IndexParameter

   References the "global" time of the year index array [-].

   NDIM = 1

   TYPE

      alias of "builtins.int"

   TIME = None

   SPAN = (0, None)

   update()

class hydpy.models.llake.llake_derived.Seconds

   Bases:

   hydpy.core.parametertools.SingleParameter

   Length of the actual simulation step size in seconds [s].

   NDIM = 0

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

   update()

class hydpy.models.llake.llake_derived.NmbSubsteps

   Bases:

   hydpy.core.parametertools.SingleParameter

   Number of the internal simulation steps [-].

   Examples:

      Initialize a llake model and assume a simulation step size of 12
      hours:

      >>> from hydpy.models.llake import *
      >>> parameterstep('1d')
      >>> simulationstep('12h')

      If the maximum internal step size is also set to 12 hours, there
      is only one internal calculation step per outer simulation step:

      >>> maxdt('12h')
      >>> derived.nmbsubsteps.update()
      >>> derived.nmbsubsteps
      nmbsubsteps(1)

      Assigning smaller values to *maxdt* increases *nmbstepsize*:

      >>> maxdt('1h')
      >>> derived.nmbsubsteps.update()
      >>> derived.nmbsubsteps
      nmbsubsteps(12)

      In case the simulationstep is not a whole multiple of *dwmax*,
      the value of *nmbsubsteps* is rounded up:

      >>> maxdt('59m')
      >>> derived.nmbsubsteps.update()
      >>> derived.nmbsubsteps
      nmbsubsteps(13)

      Even for *maxdt* values exceeding the simulationstep, the value
      of *numbsubsteps* does not become smaller than one:

      >>> maxdt('2d')
      >>> derived.nmbsubsteps.update()
      >>> derived.nmbsubsteps
      nmbsubsteps(1)

   NDIM = 0

   TYPE

      alias of "builtins.int"

   TIME = None

   SPAN = (1, None)

   update()

class hydpy.models.llake.llake_derived.VQ

   Bases:

   hydpy.core.parametertools.SeasonalParameter

   Hilfsterm (auxiliary term): math:VdtQ = 2 cdot + dt cdot Q` [mÂ³].

   >>> from hydpy.models.llake import *
   >>> parameterstep('1d')
   >>> simulationstep('12h')
   >>> n(3)
   >>> v(0., 1e5, 1e6)
   >>> q(_1=[0., 1., 2.], _7=[0., 2., 5.])
   >>> maxdt('12h')
   >>> derived.seconds.update()
   >>> derived.nmbsubsteps.update()
   >>> derived.vq.update()
   >>> derived.vq
   vq(toy_1_1_0_0_0=[0.0, 243200.0, 2086400.0],
      toy_7_1_0_0_0=[0.0, 286400.0, 2216000.0])

   NDIM = 2

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

   update()

Sequence features

Flux sequences

class hydpy.models.llake.llake_fluxes.FluxSequences(seqs, cls_fastaccess=None, cymodel=None)

   Bases:

   hydpy.core.sequencetools.FluxSequences

   Flux sequences of HydPy-L-Lake.

   The following sequence classes are selected:
      QZ Seezufluss (inflow into the lake) [mÂ³/s].

      QA Seeausfluss (outflow from the lake) [mÂ³/s].

class hydpy.models.llake.llake_fluxes.QZ

   Bases:

   hydpy.core.sequencetools.FluxSequence

   Seezufluss (inflow into the lake) [mÂ³/s].

   NDIM = 0

   NUMERIC = False

class hydpy.models.llake.llake_fluxes.QA

   Bases:

   hydpy.core.sequencetools.FluxSequence

   Seeausfluss (outflow from the lake) [mÂ³/s].

   NDIM = 0

   NUMERIC = False

State sequences

class hydpy.models.llake.llake_states.StateSequences(seqs, cls_fastaccess=None, cymodel=None)

   Bases:

   hydpy.core.sequencetools.StateSequences

   State sequences of HydPy-L-Lake.

   The following sequence classes are selected:
      V Wasservolumen (water volume) [mÂ³].

      W Wasserstand (water stage) [m].

class hydpy.models.llake.llake_states.V

   Bases:

   hydpy.core.sequencetools.StateSequence

   Wasservolumen (water volume) [mÂ³].

   NDIM = 0

   NUMERIC = False

   SPAN = (0.0, None)

class hydpy.models.llake.llake_states.W

   Bases:

   hydpy.core.sequencetools.StateSequence

   Wasserstand (water stage) [m].

   NDIM = 0

   NUMERIC = False

   SPAN = (None, None)

Inlet sequences

class hydpy.models.llake.llake_inlets.InletSequences(seqs, cls_fastaccess=None, cymodel=None)

   Bases:

   hydpy.core.sequencetools.LinkSequences

   Upstream link sequences of HydPy-L-Lake.

   The following sequence classes are selected:
      Q Abfluss (runoff) [mÂ³/s].

class hydpy.models.llake.llake_inlets.Q

   Bases:

   hydpy.core.sequencetools.LinkSequence

   Abfluss (runoff) [mÂ³/s].

   NDIM = 1

   NUMERIC = False

Outlet sequences

class hydpy.models.llake.llake_outlets.OutletSequences(seqs, cls_fastaccess=None, cymodel=None)

   Bases:

   hydpy.core.sequencetools.LinkSequences

   Downstream link sequences of HydPy-L-Lake.

   The following sequence classes are selected:
      Q Abfluss (runoff) [mÂ³/s].

class hydpy.models.llake.llake_outlets.Q

   Bases:

   hydpy.core.sequencetools.LinkSequence

   Abfluss (runoff) [mÂ³/s].

   NDIM = 0

   NUMERIC = False

Aide sequences

class hydpy.models.llake.llake_aides.AideSequences(seqs, cls_fastaccess=None, cymodel=None)

   Bases:

   hydpy.core.sequencetools.AideSequences

   Aide sequences of HydPy-L-Lake.

   The following sequence classes are selected:
      QA Seeausfluss (outflow from the lake) [mÂ³/s].

      VQ Hilfsterm (auxiliary term) [mÂ³].

      V Wasservolumen (water volume) [mÂ³].

class hydpy.models.llake.llake_aides.QA

   Bases:

   hydpy.core.sequencetools.AideSequence

   Seeausfluss (outflow from the lake) [mÂ³/s].

   NDIM = 0

   NUMERIC = False

class hydpy.models.llake.llake_aides.VQ

   Bases:

   hydpy.core.sequencetools.AideSequence

   Hilfsterm (auxiliary term) [mÂ³].

   NDIM = 0

   NUMERIC = False

class hydpy.models.llake.llake_aides.V

   Bases:

   hydpy.core.sequencetools.AideSequence

   Wasservolumen (water volume) [mÂ³].

   NDIM = 0

   NUMERIC = False
