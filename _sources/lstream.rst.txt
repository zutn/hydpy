lstream

The L-Stream model defines the methods and classes required for
performing  flood routing calculations after the Williams method as
implemented in LARSIM.

Model features

class hydpy.models.lstream.lstream_model.Model

   Bases:

   hydpy.core.modeltools.Model

   The HydPy-L-Stream model.

   The following "run methods" are called each simulation step run in
   the given sequence:
      calc_qref_v1() Determine the reference discharge within the
      given space-time interval.

      calc_hmin_qmin_hmax_qmax_v1() Determine an starting interval for
      iteration methods as the one implemented in method calc_h_v1().

      calc_h_v1() Approximate the water stage resulting in a certain
      reference discarge with the Pegasus iteration method.

      calc_ag_v1() Sum the through flown area of the total cross
      section.

      calc_rk_v1() Determine the actual traveling time of the water
      (not of the wave!).

      calc_qa_v1() Calculate outflow.

   The following "additional methods" are called by at least one "run
   method":
      calc_am_um_v1() Calculate the flown through area and the wetted
      perimeter of the main channel.

      calc_qm_v1() Calculate the discharge of the main channel after
      Manning-Strickler.

      calc_av_uv_v1() Calculate the flown through area and the wetted
      perimeter of both forelands.

      calc_qv_v1() Calculate the discharge of both forelands after
      Manning-Strickler.

      calc_avr_uvr_v1() Calculate the flown through area and the
      wetted perimeter of both outer embankments.

      calc_qvr_v1() Calculate the discharge of both outer embankments
      after Manning-Strickler.

      calc_qg_v1() Calculate the discharge of the total cross section.

   The following "inlet update methods" are called in the given
   sequence immediately  before solving the differential equations of
   the respective model:
      pick_q_v1() Update inflow.

   The following "outlet update methods" are called in the given
   sequence immediately  after solving the differential equations of
   the respective model:
      pass_q_v1() Update outflow.

hydpy.models.lstream.lstream_model.calc_qref_v1(self)

   Determine the reference discharge within the given space-time
   interval.

   Required state sequences:
      QZ


      QA

   Calculated flux sequence:
      QRef

   Basic equation:
      QRef = \frac{QZ_{new}+QZ_{old}+QA_{old}}{3}

   Example:

   >>> from hydpy.models.lstream import *
   >>> parameterstep()
   >>> states.qz.new = 3.
   >>> states.qz.old = 2.
   >>> states.qa.old = 1.
   >>> model.calc_qref_v1()
   >>> fluxes.qref
   qref(2.0)

hydpy.models.lstream.lstream_model.calc_rk_v1(self)

   Determine the actual traveling time of the water (not of the
   wave!).

   Required derived parameter:
      Sek

   Required flux sequences:
      AG


      QRef

   Calculated flux sequence:
      RK

   Basic equation:
      RK = \frac{Laen \cdot A}{QRef}

   Examples:

      First, note that the traveling time is determined in the unit of
      the actual simulation step size:

      >>> from hydpy.models.lstream import *
      >>> parameterstep()
      >>> laen(25.)
      >>> derived.sek(24*60*60)
      >>> fluxes.ag = 10.
      >>> fluxes.qref = 1.
      >>> model.calc_rk_v1()
      >>> fluxes.rk
      rk(2.893519)

      Second, for negative values or zero values of

      AG

       or

      QRef

      , the value of

      RK

       is set to zero:

      >>> fluxes.ag = 0.
      >>> fluxes.qref = 1.
      >>> model.calc_rk_v1()
      >>> fluxes.rk
      rk(0.0)

      >>> fluxes.ag = 0.
      >>> fluxes.qref = 1.
      >>> model.calc_rk_v1()
      >>> fluxes.rk
      rk(0.0)

hydpy.models.lstream.lstream_model.calc_am_um_v1(self)

   Calculate the flown through area and the wetted perimeter of the
   main channel.

   Note that the main channel is assumed to have identical slopes on
   both sides and that water flowing exactly above the main channel is
   contributing to

   AM

   .  Both theoretical surfaces seperating water above the main
   channel from water above both forelands are contributing to

   UM

   .

   Required control parameters:
      HM


      BM


      BNM

   Required flux sequence:
      H

   Calculated flux sequence:
      AM


      UM

   Examples:

      Generally, a trapezoid with reflection symmetry is assumed.
      Here its smaller base (bottom) has a length of 2 meters, its
      legs show an inclination of 1 meter per 4 meters, and its height
      (depths) is 1 meter:

      >>> from hydpy.models.lstream import *
      >>> parameterstep()
      >>> bm(2.)
      >>> bnm(4.)
      >>> hm(1.)

      The first example deals with normal flow conditions, where water
      flows within the main channel completely (

      H

       <

      HM

      ):

      >>> fluxes.h = .5
      >>> model.calc_am_um_v1()
      >>> fluxes.am
      am(2.0)
      >>> fluxes.um
      um(6.123106)

      The second example deals with high flow conditions, where water
      flows over the foreland also (

      H

       >

      HM

      ):

      >>> fluxes.h = 1.5
      >>> model.calc_am_um_v1()
      >>> fluxes.am
      am(11.0)
      >>> fluxes.um
      um(11.246211)

      The third example checks the special case of a main channel with
      zero height:

      >>> hm(0.)
      >>> model.calc_am_um_v1()
      >>> fluxes.am
      am(3.0)
      >>> fluxes.um
      um(5.0)

      The fourth example checks the special case of the actual water
      stage not being larger than zero (empty channel):

      >>> fluxes.h = 0.
      >>> hm(1.)
      >>> model.calc_am_um_v1()
      >>> fluxes.am
      am(0.0)
      >>> fluxes.um
      um(0.0)

hydpy.models.lstream.lstream_model.calc_qm_v1(self)

   Calculate the discharge of the main channel after Manning-
   Strickler.

   Required control parameters:
      EKM


      SKM


      Gef

   Required flux sequence:
      AM


      UM

   Calculated flux sequence:
      QM

   Examples:

      For appropriate strictly positive values:

      >>> from hydpy.models.lstream import *
      >>> parameterstep()
      >>> ekm(2.)
      >>> skm(50.)
      >>> gef(.01)
      >>> fluxes.am = 3.
      >>> fluxes.um = 7.
      >>> model.calc_qm_v1()
      >>> fluxes.qm
      qm(17.053102)

      For zero or negative values of the flown through surface or the
      wetted perimeter:

      >>> fluxes.am = -1.
      >>> fluxes.um = 7.
      >>> model.calc_qm_v1()
      >>> fluxes.qm
      qm(0.0)

      >>> fluxes.am = 3.
      >>> fluxes.um = 0.
      >>> model.calc_qm_v1()
      >>> fluxes.qm
      qm(0.0)

hydpy.models.lstream.lstream_model.calc_av_uv_v1(self)

   Calculate the flown through area and the wetted perimeter of both
   forelands.

   Note that the each foreland lies between the main channel and one
   outer embankment and that water flowing exactly above the a
   foreland is contributing to

   AV

   .  The theoretical surface seperating water above the main channel
   from water above the foreland is not contributing to

   UV

   , but the surface seperating water above the foreland from water
   above its outer embankment is contributing to

   UV

   .

   Required control parameters:
      HM


      BV


      BNV

   Required derived parameter:
      HV

   Required flux sequence:
      H

   Calculated flux sequence:
      AV


      UV

   Examples:

      Generally, right trapezoids are assumed.  Here, for simplicity,
      both forelands are assumed to be symmetrical.  Their smaller
      bases (bottoms) hava a length of 2 meters, their non-vertical
      legs show an inclination of 1 meter per 4 meters, and their
      height (depths) is 1 meter.  Both forelands lie 1 meter above
      the main channels bottom.

      >>> from hydpy.models.lstream import *
      >>> parameterstep()
      >>> hm(1.)
      >>> bv(2.)
      >>> bnv(4.)
      >>> derived.hv(1.)

      The first example deals with normal flow conditions, where water
      flows within the main channel completely (

      H

       <

      HM

      ):

      >>> fluxes.h = .5
      >>> model.calc_av_uv_v1()
      >>> fluxes.av
      av(0.0, 0.0)
      >>> fluxes.uv
      uv(0.0, 0.0)

      The second example deals with moderate high flow conditions,
      where water flows over both forelands, but not over their
      embankments (

      HM

       <

      H

       < (

      HM

       +

      HV

      )):

      >>> fluxes.h = 1.5
      >>> model.calc_av_uv_v1()
      >>> fluxes.av
      av(1.5, 1.5)
      >>> fluxes.uv
      uv(4.061553, 4.061553)

      The third example deals with extreme high flow conditions, where
      water flows over the both foreland and their outer embankments
      ((

      HM

       +

      HV

      ) <

      H

      ):

      >>> fluxes.h = 2.5
      >>> model.calc_av_uv_v1()
      >>> fluxes.av
      av(7.0, 7.0)
      >>> fluxes.uv
      uv(6.623106, 6.623106)

      The forth example assures that zero widths or hights of the
      forelands are handled properly:

      >>> bv.left = 0.
      >>> derived.hv.right = 0.
      >>> model.calc_av_uv_v1()
      >>> fluxes.av
      av(4.0, 3.0)
      >>> fluxes.uv
      uv(4.623106, 3.5)

hydpy.models.lstream.lstream_model.calc_qv_v1(self)

   Calculate the discharge of both forelands after Manning-Strickler.

   Required control parameters:
      EKV


      SKV


      Gef

   Required flux sequence:
      AV


      UV

   Calculated flux sequence:
      QV

   Examples:

      For appropriate strictly positive values:

      >>> from hydpy.models.lstream import *
      >>> parameterstep()
      >>> ekv(2.)
      >>> skv(50.)
      >>> gef(.01)
      >>> fluxes.av = 3.
      >>> fluxes.uv = 7.
      >>> model.calc_qv_v1()
      >>> fluxes.qv
      qv(17.053102, 17.053102)

      For zero or negative values of the flown through surface or the
      wetted perimeter:

      >>> fluxes.av = -1., 3.
      >>> fluxes.uv = 7., 0.
      >>> model.calc_qv_v1()
      >>> fluxes.qv
      qv(0.0, 0.0)

hydpy.models.lstream.lstream_model.calc_avr_uvr_v1(self)

   Calculate the flown through area and the wetted perimeter of both
   outer embankments.

   Note that each outer embankment lies beyond its foreland and that
   all water flowing exactly above the a embankment is added to

   AVR

   . The theoretical surface seperating water above the foreland from
   water above its embankment is not contributing to

   UVR

   .

   Required control parameters:
      HM


      BNVR

   Required derived parameter:
      HV

   Required flux sequence:
      H

   Calculated flux sequence:
      AVR


      UVR

   Examples:

      Generally, right trapezoids are assumed.  Here, for simplicity,
      both forelands are assumed to be symmetrical.  Their smaller
      bases (bottoms) hava a length of 2 meters, their non-vertical
      legs show an inclination of 1 meter per 4 meters, and their
      height (depths) is 1 meter.  Both forelands lie 1 meter above
      the main channels bottom.

      Generally, a triangles are assumed, with the vertical side
      seperating the foreland from its outer embankment.  Here, for
      simplicity, both forelands are assumed to be symmetrical.  Their
      inclinations are 1 meter per 4 meters and their lowest point is
      1 meter above the forelands bottom and 2 meters above the main
      channels bottom:

      >>> from hydpy.models.lstream import *
      >>> parameterstep()
      >>> hm(1.)
      >>> bnvr(4.)
      >>> derived.hv(1.)

      The first example deals with moderate high flow conditions,
      where water flows over the forelands, but not over their outer
      embankments (

      HM

       <

      H

       < (

      HM

       +

      HV

      )):

      >>> fluxes.h = 1.5
      >>> model.calc_avr_uvr_v1()
      >>> fluxes.avr
      avr(0.0, 0.0)
      >>> fluxes.uvr
      uvr(0.0, 0.0)

      The second example deals with extreme high flow conditions,
      where water flows over the both foreland and their outer
      embankments ((

      HM

       +

      HV

      ) <

      H

      ):

      >>> fluxes.h = 2.5
      >>> model.calc_avr_uvr_v1()
      >>> fluxes.avr
      avr(0.5, 0.5)
      >>> fluxes.uvr
      uvr(2.061553, 2.061553)

hydpy.models.lstream.lstream_model.calc_qvr_v1(self)

   Calculate the discharge of both outer embankments after Manning-
   Strickler.

   Required control parameters:
      EKV


      SKV


      Gef

   Required flux sequence:
      AVR


      UVR

   Calculated flux sequence:
      QVR

   Examples:

      For appropriate strictly positive values:

      >>> from hydpy.models.lstream import *
      >>> parameterstep()
      >>> ekv(2.)
      >>> skv(50.)
      >>> gef(.01)
      >>> fluxes.avr = 3.
      >>> fluxes.uvr = 7.
      >>> model.calc_qvr_v1()
      >>> fluxes.qvr
      qvr(17.053102, 17.053102)

      For zero or negative values of the flown through surface or the
      wetted perimeter:

      >>> fluxes.avr = -1., 3.
      >>> fluxes.uvr = 7., 0.
      >>> model.calc_qvr_v1()
      >>> fluxes.qvr
      qvr(0.0, 0.0)

hydpy.models.lstream.lstream_model.calc_ag_v1(self)

   Sum the through flown area of the total cross section.

   Required flux sequences:
      AM


      AV


      AVR

   Calculated flux sequence:
      AG

   Example:

   >>> from hydpy.models.lstream import *
   >>> parameterstep()
   >>> fluxes.am = 1.
   >>> fluxes.av= 2., 3.
   >>> fluxes.avr = 4., 5.
   >>> model.calc_ag_v1()
   >>> fluxes.ag
   ag(15.0)

hydpy.models.lstream.lstream_model.calc_qg_v1(self)

   Calculate the discharge of the total cross section.

   Method

   calc_qg_v1()

    applies the actual versions of all methods for calculating the
   flown through areas, wetted perimeters and discharges of the
   different cross section compartments.  Hence its requirements might
   be different for various application models.

hydpy.models.lstream.lstream_model.calc_hmin_qmin_hmax_qmax_v1(self)

   Determine an starting interval for iteration methods as the one
   implemented in method

   calc_h_v1()

   .

   The resulting interval is determined in a manner, that on the one
   hand Qmin \leq QRef \leq Qmax is fulfilled and on the other hand
   the results of method

   calc_qg_v1()

    are continuous for Hmin \leq H \leq Hmax.

   Required control parameter:
      HM

   Required derived parameters:
      HV


      QM


      QV

   Required flux sequence:
      QRef

   Calculated aide sequences:
      HMin


      HMax


      QMin


      QMax

   Besides the mentioned required parameters and sequences, those of
   the actual method for calculating the discharge of the total cross
   section might be required.  This is the case whenever water flows
   on both outer embankments.  In such occasions no previously
   determined upper boundary values are available and method

   calc_hmin_qmin_hmax_qmax_v1()

    needs to increase the value of HMax successively until the
   condition QG \leq QMax is met.

hydpy.models.lstream.lstream_model.calc_h_v1(self)

   Approximate the water stage resulting in a certain reference
   discarge with the Pegasus iteration method.

   Required control parameters:
      QTol


      HTol

   Required flux sequence:
      QRef

   Calculated aide sequences:
      HMin


      HMax


      QMin


      QMax

   Calculated flux sequence:
      H

   Besides the parameters and sequences given above, those of the
   actual method for calculating the discharge of the total cross
   section are required.

   Examples:
      Essentially, the Pegasus method is a root finding algorithm
      which sequentially decreases its search radius (like the simple
      bisection algorithm) and shows superlinear convergence
      properties (like the Newton-Raphson algorithm).  Ideally, its
      convergence should be proved for each application model to be
      derived from HydPy-L-Stream. The following examples focus on the
      methods

      calc_hmin_qmin_hmax_qmax_v1()

       and

      calc_qg_v1()

       (including their submethods) only:

      >>> from hydpy.models.lstream import *
      >>> parameterstep()
      >>> model.calc_hmin_qmin_hmax_qmax = model.calc_hmin_qmin_hmax_qmax_v1
      >>> model.calc_qg = model.calc_qg_v1
      >>> model.calc_qm = model.calc_qm_v1
      >>> model.calc_av_uv = model.calc_av_uv_v1
      >>> model.calc_qv = model.calc_qv_v1
      >>> model.calc_avr_uvr = model.calc_avr_uvr_v1
      >>> model.calc_qvr = model.calc_qvr_v1

      Define the geometry and roughness values for the first test
      channel:

      >>> bm(2.)
      >>> bnm(4.)
      >>> hm(1.)
      >>> bv(.5, 10.)
      >>> bbv(1., 2.)
      >>> bnv(1., 8.)
      >>> bnvr(20.)
      >>> ekm(1.)
      >>> skm(20.)
      >>> ekv(1.)
      >>> skv(60., 80.)
      >>> gef(.01)

      Set the error tolerances of the iteration small enough, not to
      compromise the shown first six decimal places of the following
      results:

      >>> qtol(1e-10)
      >>> htol(1e-10)

      Derive the required secondary parameters:

      >>> derived.hv.update()
      >>> derived.qm.update()
      >>> derived.qv.update()

      Define a test function, accepting a reference discharge and
      printing both the approximated water stage and the related
      discharge value:

      >>> def test(qref):
      ...     fluxes.qref = qref
      ...     model.calc_hmin_qmin_hmax_qmax()
      ...     model.calc_h()
      ...     print(repr(fluxes.h))
      ...     print(repr(fluxes.qg))

      Zero discharge and the following discharge values are related to
      the only discontinuities of the given root finding problem:

      >>> derived.qm
      qm(8.399238)
      >>> derived.qv
      qv(154.463234, 23.073584)

      The related water stages are the ones (directly or indirectly)
      defined above:

      >>> test(0.)
      h(0.0)
      qg(0.0)
      >>> test(derived.qm)
      h(1.0)
      qg(8.399238)
      >>> test(derived.qv.left)
      h(2.0)
      qg(154.463234)
      >>> test(derived.qv.right)
      h(1.25)
      qg(23.073584)

      Test some intermediate water stages, inundating the only the
      main channel, the main channel along with the right foreland,
      and the main channel along with both forelands respectively:

      >>> test(6.)
      h(0.859452)
      qg(6.0)
      >>> test(10.)
      h(1.047546)
      qg(10.0)
      >>> test(100)
      h(1.77455)
      qg(100.0)

      Finally, test two extreme water stages, inundating both outer
      foreland embankments:

      >>> test(200.)
      h(2.152893)
      qg(200.0)
      >>> test(2000.)
      h(4.240063)
      qg(2000.0)

      There is a potential risk of the implemented iteration method to
      fail for special channel geometries.  To test such cases in a
      more condensed manner, the following test methods evaluates
      different water stages automatically in accordance with the
      example above.  An error message is printed only, the estimated
      discharge does not approximate the reference discharge with six
      decimal places:

      >>> def test():
      ...     derived.hv.update()
      ...     derived.qm.update()
      ...     derived.qv.update()
      ...     qm, qv = derived.qm, derived.qv
      ...     for qref in [0., qm, qv.left, qv.right,
      ...                  2./3.*qm+1./3.*min(qv),
      ...                  2./3.*min(qv)+1./3.*max(qv),
      ...                  3.*max(qv), 30.*max(qv)]:
      ...         fluxes.qref = qref
      ...         model.calc_hmin_qmin_hmax_qmax()
      ...         model.calc_h()
      ...         if abs(round(fluxes.qg-qref) > 0.):
      ...             print('Error!', 'qref:', qref, 'qg:', fluxes.qg)

      Check for a triangle main channel:

      >>> bm(0.)
      >>> test()
      >>> bm(2.)

      Check for a completely flat main channel:

      >>> hm(0.)
      >>> test()
      >>> hm(1.)

      Check for a nonexistend main channel:

      >>> bm(0.)
      >>> bnm(0.)
      >>> test()
      >>> bm(2.)
      >>> bnm(4.)

      Check for a nonexistend forelands:

      >>> bv(0.)
      >>> bbv(0.)
      >>> test()
      >>> bv(.5, 10.)
      >>> bbv(1., 2.)

      Check for nonexistend outer foreland embankments:

      >>> bnvr(0.)
      >>> test()

      To take the last test as an illustrative example, one can see
      that the given reference discharge is met by the estimated total
      discharge, which consists of components related to the main
      channel and the forelands only:

      >>> fluxes.qref
      qref(3932.452785)
      >>> fluxes.qg
      qg(3932.452785)
      >>> fluxes.qm
      qm(530.074621)
      >>> fluxes.qv
      qv(113.780226, 3288.597937)
      >>> fluxes.qvr
      qvr(0.0, 0.0)

hydpy.models.lstream.lstream_model.calc_qa_v1(self)

   Calculate outflow.

   The working equation is the analytical solution of the linear
   storage equation under the assumption of constant change in inflow
   during the simulation time step.

   Required flux sequence:
      RK

   Required state sequence:
      QZ

   Updated state sequence:
      QA

   Basic equation:
      QA_{neu} = QA_{alt} + (QZ_{alt}-QA_{alt}) \cdot
      (1-exp(-RK^{-1})) + (QZ_{neu}-QZ_{alt}) \cdot
      (1-RK\cdot(1-exp(-RK^{-1})))

   Examples:

      A normal test case:

      >>> from hydpy.models.lstream import *
      >>> parameterstep()
      >>> fluxes.rk(0.1)
      >>> states.qz.old = 2.
      >>> states.qz.new = 4.
      >>> states.qa.old = 3.
      >>> model.calc_qa_v1()
      >>> states.qa
      qa(3.800054)

      First extreme test case (zero division is circumvented):

      >>> fluxes.rk(0.)
      >>> model.calc_qa_v1()
      >>> states.qa
      qa(4.0)

      Second extreme test case (numerical overflow is circumvented):

      >>> fluxes.rk(1e200)
      >>> model.calc_qa_v1()
      >>> states.qa
      qa(5.0)

hydpy.models.lstream.lstream_model.pick_q_v1(self)

   Update inflow.

hydpy.models.lstream.lstream_model.pass_q_v1(self)

   Update outflow.

Parameter features

Control parameters

class hydpy.models.lstream.lstream_control.ControlParameters(pars, cls_fastaccess=None, cymodel=None)

   Bases:

   hydpy.core.parametertools.SubParameters

   Control parameters HydPy-L-Stream, directly defined by the user.

   The following parameter classes are selected:
      Laen Flusslänge (channel length) [km].

      Gef Sohlgefälle (channel slope) [-].

      HM Höhe Hauptgerinne (height of the main channel) [m].

      BM Sohlbreite Hauptgerinne (bed width of the main channel) [m].

      BV Sohlbreite Vorländer (bed widths of both forelands) [m].

      BBV Breite Vorlandböschungen (width of both foreland
      embankments) [m].

      BNM Böschungsneigung Hauptgerinne (slope of both main channel
      embankments) [-].

      BNV Böschungsneigung Vorländer (slope of both foreland
      embankments) [-].

      BNVR Böschungsneigung Vorlandränder (slope of both outer
      embankments) [-].

      SKM Rauigkeitsbeiwert Hauptgerinne (roughness coefficient of the
      main channel) [m^(1/3)/s].

      SKV Rauigkeitsbeiwert Vorländer (roughness coefficient of the
      both forelands) [m^(1/3)/s].

      EKM Kalibrierfaktor Hauptgerinne (calibration factor for the
      main channel) [-].

      EKV Kalibrierfaktor Vorländer (calibration factor for both
      forelands) [m].

      QTol Approximationstoleranz Abfluss (discharge related stopping
      criterion for root-finding algorithms) [m³/s].

      HTol Approximationstoleranz Wasserstand (water stage related
      stopping criterion for root-finding algorithms) [m].

class hydpy.models.lstream.lstream_control.Laen

   Bases:

   hydpy.core.parametertools.SingleParameter

   Flusslänge (channel length) [km].

   NDIM = 0

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_control.Gef

   Bases:

   hydpy.core.parametertools.SingleParameter

   Sohlgefälle (channel slope) [-].

   NDIM = 0

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_control.HM

   Bases:

   hydpy.core.parametertools.SingleParameter

   Höhe Hauptgerinne (height of the main channel) [m].

   NDIM = 0

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_control.BM

   Bases:

   hydpy.core.parametertools.SingleParameter

   Sohlbreite Hauptgerinne (bed width of the main channel) [m].

   NDIM = 0

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_control.BNM

   Bases:

   hydpy.core.parametertools.SingleParameter

   Böschungsneigung Hauptgerinne (slope of both main channel
   embankments) [-].

   NDIM = 0

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_control.BV

   Bases:

   hydpy.core.parametertools.LeftRightParameter

   Sohlbreite Vorländer (bed widths of both forelands) [m].

   NDIM = 1

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_control.BBV

   Bases:

   hydpy.core.parametertools.LeftRightParameter

   Breite Vorlandböschungen (width of both foreland embankments) [m].

   NDIM = 1

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_control.BNV

   Bases:

   hydpy.core.parametertools.LeftRightParameter

   Böschungsneigung Vorländer (slope of both foreland embankments)
   [-].

   NDIM = 1

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_control.BNVR

   Bases:

   hydpy.core.parametertools.LeftRightParameter

   Böschungsneigung Vorlandränder (slope of both outer embankments)
   [-].

   NDIM = 1

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_control.SKM

   Bases:

   hydpy.core.parametertools.SingleParameter

   Rauigkeitsbeiwert Hauptgerinne (roughness coefficient of the main
   channel) [m^(1/3)/s].

   NDIM = 0

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_control.SKV

   Bases:

   hydpy.core.parametertools.LeftRightParameter

   Rauigkeitsbeiwert Vorländer (roughness coefficient of the both
   forelands) [m^(1/3)/s].

   NDIM = 1

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_control.EKM

   Bases:

   hydpy.core.parametertools.SingleParameter

   Kalibrierfaktor Hauptgerinne (calibration factor for the main
   channel) [-].

   NDIM = 0

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_control.EKV

   Bases:

   hydpy.core.parametertools.LeftRightParameter

   Kalibrierfaktor Vorländer (calibration factor for both forelands)
   [m].

   NDIM = 1

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_control.QTol

   Bases:

   hydpy.core.parametertools.SingleParameter

   Approximationstoleranz Abfluss (discharge related stopping
   criterion for root-finding algorithms) [m³/s].

   NDIM = 0

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

   INIT = 1e-06

class hydpy.models.lstream.lstream_control.HTol

   Bases:

   hydpy.core.parametertools.SingleParameter

   Approximationstoleranz Wasserstand (water stage related stopping
   criterion for root-finding algorithms) [m].

   NDIM = 0

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

   INIT = 1e-06

Derived parameters

class hydpy.models.lstream.lstream_derived.DerivedParameters(pars, cls_fastaccess=None, cymodel=None)

   Bases:

   hydpy.core.parametertools.SubParameters

   Derived parameters of HydPy-L-Stream, indirectly defined by the
   user.

   The following parameter classes are selected:
      HV Höhe Vorländer (height of both forelands) [m].

      QM Bordvoller Abfluss Hauptgerinne (maximum discharge of the
      main channel) [m³/s].

      QV Bordvoller Abfluss Vorländer (maximum discharge of both
      forelands) [m³/s].

      Sek Sekunden im Simulationszeitschritt (Number of seconds of the
      selected simulation time step) [T].

class hydpy.models.lstream.lstream_derived.HV

   Bases:

   hydpy.core.parametertools.LeftRightParameter

   Höhe Vorländer (height of both forelands) [m].

   NDIM = 1

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

   update()

      Update value based on HV=BBV/BNV.

      Required Parameters:
         BBV


         BNV

      Examples:
         >>> from hydpy.models.lstream import *
         >>> parameterstep('1d')
         >>> bbv(left=10., right=40.)
         >>> bnv(left=10., right=20.)
         >>> derived.hv.update()
         >>> derived.hv
         hv(1.0, 2.0)
         >>> bbv(left=10., right=0.)
         >>> bnv(left=0., right=20.)
         >>> derived.hv.update()
         >>> derived.hv
         hv(0.0)

class hydpy.models.lstream.lstream_derived.QM

   Bases:

   hydpy.core.parametertools.SingleParameter

   Bordvoller Abfluss Hauptgerinne (maximum discharge of the main
   channel) [m³/s].

   NDIM = 0

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

   update()

      Update value based on the actual

      calc_qg_v1()

       method.

      Required derived parameter:
         H

      Note that the value of parameter

      QM

       is directly related to the value of parameter

      HM

       and indirectly related to all parameters values relevant for
      method

      calc_qg_v1()

      . Hence the complete paramter (and sequence) requirements might
      differ for various application models.

      For examples, see the documentation on method ToDo.

class hydpy.models.lstream.lstream_derived.QV

   Bases:

   hydpy.core.parametertools.LeftRightParameter

   Bordvoller Abfluss Vorländer (maximum discharge of both forelands)
   [m³/s].

   NDIM = 1

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

   update()

      Update value based on the actual

      calc_qg_v1()

       method.

      Required derived parameter:
         HV

      Note that the values of parameter

      QV

       are directly related to the values of parameter

      HV

       and indirectly related to all parameters values relevant for
      method

      calc_qg_v1()

      . Hence the complete paramter (and sequence) requirements might
      differ for various application models.

      For examples, see the documentation on method ToDo.

class hydpy.models.lstream.lstream_derived.Sek

   Bases:

   hydpy.core.parametertools.SingleParameter

   Sekunden im Simulationszeitschritt (Number of seconds of the
   selected simulation time step) [T].

   NDIM = 0

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, None)

   update()

      Update value based on

      simulationstep

      .

      Example:
         >>> from hydpy.models.lstream import *
         >>> parameterstep()
         >>> simulationstep('1d')
         >>> derived.sek.update()
         >>> derived.sek
         sek(86400.0)

Sequence features

Flux sequences

class hydpy.models.lstream.lstream_fluxes.FluxSequences(seqs, cls_fastaccess=None, cymodel=None)

   Bases:

   hydpy.core.sequencetools.FluxSequences

   Flux sequences of HydPy-L-Stream.

   The following sequence classes are selected:
      QRef Referenzabfluss (reference flow) [m³/s].

      H Wasserstand (water stage) [m].

      AM Durchflossene Fläche Hauptgerinne (flown through area of the
      main channel) [m²].

      AV Durchflossene Fläche Vorländer (flown through area of both
      forelands) [m²].

      AVR Durchflossene Fläche Vorlandränder (flown through area of
      both outer embankments) [m²].

      AG Durchflossene Fläche gesamt (total flown through area) [m²].

      UM Benetzter Umfang Hauptgerinne (wetted perimeter of the main
      channel) [m].

      UV Benetzter Umfang Vorländer (wetted perimeter of both
      forelands) [m].

      UVR Benetzter Umfang Vorlandränder (wetted perimeter of both
      outer embankments) [m].

      QM Durchfluss Hauptgerinne (discharge of the main channel) [m³].

      QV Durchfluss Voränder (discharge of both forelands) [m³].

      QVR Durchfluss Vorlandränder (discharge of both outer
      embankment) [m³].

      QG Durchfluss gesamt (total discharge) [m³].

      RK Schwerpunktlaufzeit (traveling time) [T].

class hydpy.models.lstream.lstream_fluxes.QRef

   Bases:

   hydpy.core.sequencetools.FluxSequence

   Referenzabfluss (reference flow) [m³/s].

   NDIM = 0

   NUMERIC = False

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_fluxes.H

   Bases:

   hydpy.core.sequencetools.FluxSequence

   Wasserstand (water stage) [m].

   NDIM = 0

   NUMERIC = False

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_fluxes.AM

   Bases:

   hydpy.core.sequencetools.FluxSequence

   Durchflossene Fläche Hauptgerinne (flown through area of the main
   channel) [m²].

   NDIM = 0

   NUMERIC = False

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_fluxes.AV

   Bases:

   hydpy.core.sequencetools.LeftRightSequence

   Durchflossene Fläche Vorländer (flown through area of both
   forelands) [m²].

   NDIM = 1

   NUMERIC = False

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_fluxes.AVR

   Bases:

   hydpy.core.sequencetools.LeftRightSequence

   Durchflossene Fläche Vorlandränder (flown through area of both
   outer embankments) [m²].

   NDIM = 1

   NUMERIC = False

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_fluxes.AG

   Bases:

   hydpy.core.sequencetools.FluxSequence

   Durchflossene Fläche gesamt  (total flown through area) [m²].

   NDIM = 0

   NUMERIC = False

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_fluxes.UM

   Bases:

   hydpy.core.sequencetools.FluxSequence

   Benetzter Umfang Hauptgerinne (wetted perimeter of the main
   channel) [m].

   NDIM = 0

   NUMERIC = False

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_fluxes.UV

   Bases:

   hydpy.core.sequencetools.LeftRightSequence

   Benetzter Umfang Vorländer (wetted perimeter of both forelands)
   [m].

   NDIM = 1

   NUMERIC = False

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_fluxes.UVR

   Bases:

   hydpy.core.sequencetools.LeftRightSequence

   Benetzter Umfang Vorlandränder (wetted perimeter of both outer
   embankments) [m].

   NDIM = 1

   NUMERIC = False

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_fluxes.QM

   Bases:

   hydpy.core.sequencetools.FluxSequence

   Durchfluss Hauptgerinne (discharge of the main channel) [m³].

   NDIM = 0

   NUMERIC = False

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_fluxes.QV

   Bases:

   hydpy.core.sequencetools.LeftRightSequence

   Durchfluss Voränder (discharge of both forelands) [m³].

   NDIM = 1

   NUMERIC = False

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_fluxes.QVR

   Bases:

   hydpy.core.sequencetools.LeftRightSequence

   Durchfluss Vorlandränder (discharge of both outer embankment) [m³].

   NDIM = 1

   NUMERIC = False

   SPAN = (1.0, None)

class hydpy.models.lstream.lstream_fluxes.QG

   Bases:

   hydpy.core.sequencetools.FluxSequence

   Durchfluss gesamt (total discharge) [m³].

   NDIM = 0

   NUMERIC = False

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_fluxes.RK

   Bases:

   hydpy.core.sequencetools.FluxSequence

   Schwerpunktlaufzeit (traveling time) [T].

   NDIM = 0

   NUMERIC = False

   SPAN = (0.0, None)

State sequences

class hydpy.models.lstream.lstream_states.StateSequences(seqs, cls_fastaccess=None, cymodel=None)

   Bases:

   hydpy.core.sequencetools.StateSequences

   State sequences of HydPy-L-Stream.

   The following sequence classes are selected:
      QZ Zufluss in Gerinnestrecke (inflow into the channel) [m³/s].

      QA Abfluss aus Gerinnestrecke (outflow out of the channel)
      [m³/s].

class hydpy.models.lstream.lstream_states.QZ

   Bases:

   hydpy.core.sequencetools.StateSequence

   Zufluss in Gerinnestrecke (inflow into the channel) [m³/s].

   NDIM = 0

   NUMERIC = False

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_states.QA

   Bases:

   hydpy.core.sequencetools.StateSequence

   Abfluss aus Gerinnestrecke (outflow out of the channel) [m³/s].

   NDIM = 0

   NUMERIC = False

   SPAN = (0.0, None)

Inlet sequences

class hydpy.models.lstream.lstream_inlets.InletSequences(seqs, cls_fastaccess=None, cymodel=None)

   Bases:

   hydpy.core.sequencetools.LinkSequences

   Upstream link sequences of HydPy-L-Stream.

   The following sequence classes are selected:
      Q Abfluss (runoff) [m³/s].

class hydpy.models.lstream.lstream_inlets.Q

   Bases:

   hydpy.core.sequencetools.LinkSequence

   Abfluss (runoff) [m³/s].

   NDIM = 1

   NUMERIC = False

Outlet sequences

class hydpy.models.lstream.lstream_outlets.OutletSequences(seqs, cls_fastaccess=None, cymodel=None)

   Bases:

   hydpy.core.sequencetools.LinkSequences

   Downstream link sequences of HydPy-L-Stream.

   The following sequence classes are selected:
      Q Abfluss (runoff) [m³/s].

class hydpy.models.lstream.lstream_outlets.Q

   Bases:

   hydpy.core.sequencetools.LinkSequence

   Abfluss (runoff) [m³/s].

   NDIM = 0

   NUMERIC = False

Aide sequences

class hydpy.models.lstream.lstream_aides.AideSequences(seqs, cls_fastaccess=None, cymodel=None)

   Bases:

   hydpy.core.sequencetools.AideSequences

   Aide sequences of HydPy-L-Stream.

   The following sequence classes are selected:
      Temp Temporäre Variable (temporary variable) [-].

      HMin Untere Wasserstandsgrenze (lower water stage boundary) [m].

      HMax Obere Wasserstandsgrenze (upper water stage boundary) [m].

      QMin Untere Abflussgrenze (lower discharge boundary) [m³/s].

      QMax Obere Abflussgrenze (upper discharge boundary) [m³/s].

      QTest Vergleichsabfluss (discharge to be compared) [m³/s].

class hydpy.models.lstream.lstream_aides.Temp

   Bases:

   hydpy.core.sequencetools.AideSequence

   Temporäre Variable (temporary variable) [-].

   NDIM = 0

   NUMERIC = False

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_aides.HMin

   Bases:

   hydpy.core.sequencetools.AideSequence

   Untere Wasserstandsgrenze (lower water stage boundary) [m].

   NDIM = 0

   NUMERIC = False

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_aides.HMax

   Bases:

   hydpy.core.sequencetools.AideSequence

   Obere Wasserstandsgrenze (upper water stage boundary) [m].

   NDIM = 0

   NUMERIC = False

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_aides.QMin

   Bases:

   hydpy.core.sequencetools.AideSequence

   Untere Abflussgrenze (lower discharge boundary) [m³/s].

   NDIM = 0

   NUMERIC = False

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_aides.QMax

   Bases:

   hydpy.core.sequencetools.AideSequence

   Obere Abflussgrenze (upper discharge boundary) [m³/s].

   NDIM = 0

   NUMERIC = False

   SPAN = (0.0, None)

class hydpy.models.lstream.lstream_aides.QTest

   Bases:

   hydpy.core.sequencetools.AideSequence

   Vergleichsabfluss (discharge to be compared) [m³/s].

   NDIM = 0

   NUMERIC = False

   SPAN = (0.0, None)
