hstream

The HydPy-H-Stream model is an very simple routing approach.  More
precisely, it is a simplification of the Muskingum approach, which
itself can be seen as a very simple finite difference solution of the
routing problem.

Model features

class hydpy.models.hstream.hstream_model.Model

   Bases:

   hydpy.core.modeltools.Model

   The HydPy-H-Stream model.

   The following "run methods" are called each simulation step run in
   the given sequence:
      calc_qjoints_v1() Apply the routing equation.

   The following "inlet update methods" are called in the given
   sequence immediately  before solving the differential equations of
   the respective model:
      pick_q_v1() Assign the actual value of the inlet sequence to the
      upper joint of the subreach upstream.

   The following "outlet update methods" are called in the given
   sequence immediately  after solving the differential equations of
   the respective model:
      pass_q_v1() Assing the actual value of the lower joint of of the
      subreach downstream to the outlet sequence.

hydpy.models.hstream.hstream_model.calc_qjoints_v1(self)

   Apply the routing equation.

   Required derived parameters:
      NmbSegments


      C1


      C2


      C3

   Updated state sequence:
      QJoints

   Basic equation:
      Q_{space+1,time+1} = c1 \cdot Q_{space,time+1} + c2 \cdot
      Q_{space,time} + c3 \cdot Q_{space+1,time}

   Examples:

      Firstly, define a reach divided into 4 segments:

      >>> from hydpy.models.hstream import *
      >>> parameterstep('1d')
      >>> derived.nmbsegments(4)
      >>> states.qjoints.shape = 5

      Zero damping is achieved through the following coefficients:

      >>> derived.c1(0.)
      >>> derived.c2(1.)
      >>> derived.c3(0.)

      For initialization, assume a base flow of 2m³/s:

      >>> states.qjoints.old = 2.
      >>> states.qjoints.new = 2.

      Through successive assignements of different discharge values to
      the upper junction one can see, that these discharge values are
      simply shifted from each junction to the respective lower
      junction at each time step:

      >>> states.qjoints[0] = 5.
      >>> model.calc_qjoints_v1()
      >>> model.new2old()
      >>> states.qjoints
      qjoints(5.0, 2.0, 2.0, 2.0, 2.0)
      >>> states.qjoints[0] = 8.
      >>> model.calc_qjoints_v1()
      >>> model.new2old()
      >>> states.qjoints
      qjoints(8.0, 5.0, 2.0, 2.0, 2.0)
      >>> states.qjoints[0] = 6.
      >>> model.calc_qjoints_v1()
      >>> model.new2old()
      >>> states.qjoints
      qjoints(6.0, 8.0, 5.0, 2.0, 2.0)

      With the maximum damping allowed, the values of the derived
      parameters are:

      >>> derived.c1(.5)
      >>> derived.c2(.0)
      >>> derived.c3(.5)

      Assuming again a base flow of 2m³/s and the same input values
      results in:

      >>> states.qjoints.old = 2.
      >>> states.qjoints.new = 2.

      >>> states.qjoints[0] = 5.
      >>> model.calc_qjoints_v1()
      >>> model.new2old()
      >>> states.qjoints
      qjoints(5.0, 3.5, 2.75, 2.375, 2.1875)
      >>> states.qjoints[0] = 8.
      >>> model.calc_qjoints_v1()
      >>> model.new2old()
      >>> states.qjoints
      qjoints(8.0, 5.75, 4.25, 3.3125, 2.75)
      >>> states.qjoints[0] = 6.
      >>> model.calc_qjoints_v1()
      >>> model.new2old()
      >>> states.qjoints
      qjoints(6.0, 5.875, 5.0625, 4.1875, 3.46875)

hydpy.models.hstream.hstream_model.pick_q_v1(self)

   Assign the actual value of the inlet sequence to the upper joint of
   the subreach upstream.

hydpy.models.hstream.hstream_model.pass_q_v1(self)

   Assing the actual value of the lower joint of of the subreach
   downstream to the outlet sequence.

Parameter features

Parameter tools

class hydpy.models.hstream.hstream_parameters.Parameters(kwargs)

   Bases:

   hydpy.core.parametertools.Parameters

   All parameters of the hstream model.

   update()

      Determines the values of the parameters handled by

      DerivedParameters

       based on the values of the parameters.

   calc_nmbsegments()

      Determines in how many segments the whole reach needs to be
      divided to approximate the desired lag time via integer
      rounding. Adjusts the shape of sequence

      QJoints

       additionally.

      Required control parameters:
         Lag

      Calculated derived parameters:
         NmbSegments

      Prepared state sequence:
         QJoints

      Example:

         Define a lag time of 1.4 days and a simulation step size of
         12 hours:

         >>> from hydpy.models.hstream import *
         >>> parameterstep('1d')
         >>> simulationstep('12h')
         >>> lag(1.4)

         Then the actual lag value for the simulation step size is 2.8

         >>> lag
         lag(1.4)
         >>> lag.value
         2.8

         Through rounding the number of segments is determined:

         >>> model.parameters.calc_nmbsegments()
         >>> derived.nmbsegments
         nmbsegments(3)

         The number of joints is always the number of segments plus
         one:

         >>> states.qjoints.shape
         (4,)

   calc_coefficients()

      Calculates the Muskingum coefficients.

      Required control parameters:
         Damp

      Calculated derived parameters:
         C1


         C2


         C3

      Basic equations:
         c_1 = \frac{Damp}{1+Damp}

         c_3 = \frac{Damp}{1+Damp}

         c_2 = 1.-c_1-c_3

      Examples:

         If no damping is required, the coeffients are:

         >>> from hydpy.models.hstream import *
         >>> parameterstep('1d')
         >>> damp(0.)
         >>> model.parameters.calc_coefficients()
         >>> derived.c1, derived.c2, derived.c3
         (c1(0.0), c2(1.0), c3(0.0))

         The strongest damping is achieved through:

         >>> damp(1.)
         >>> model.parameters.calc_coefficients()
         >>> derived.c1, derived.c2, derived.c3
         (c1(0.5), c2(0.0), c3(0.5))

         And finally an intermediate example:

         >>> damp(.25)
         >>> model.parameters.calc_coefficients()
         >>> derived.c1, derived.c2, derived.c3
         (c1(0.2), c2(0.6), c3(0.2))

Control parameters

class hydpy.models.hstream.hstream_control.ControlParameters(pars, cls_fastaccess=None, cymodel=None)

   Bases:

   hydpy.core.parametertools.SubParameters

   Control parameters of hstream, directly defined by the user.

   The following parameter classes are selected:
      Lag Time lag between inflow and outflow [T].

      Damp Damping of the hydrograph [-].

class hydpy.models.hstream.hstream_control.Lag

   Bases:

   hydpy.core.parametertools.SingleParameter

   Time lag between inflow and outflow [T].

   NDIM = 0

   TYPE

      alias of "builtins.float"

   TIME = False

   SPAN = (0.0, None)

class hydpy.models.hstream.hstream_control.Damp

   Bases:

   hydpy.core.parametertools.SingleParameter

   Damping of the hydrograph [-].

   NDIM = 0

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, 1.0)

Derived parameters

class hydpy.models.hstream.hstream_derived.DerivedParameters(pars, cls_fastaccess=None, cymodel=None)

   Bases:

   hydpy.core.parametertools.SubParameters

   Derived parameters of hstream, indirectly defined by the user.

   The following parameter classes are selected:
      NmbSegments Number of river segments [-].

      C1 First coefficient of the muskingum working formula [-].

      C2 Second coefficient of the muskingum working formula [-].

      C3 Third coefficient of the muskingum working formula [-].

class hydpy.models.hstream.hstream_derived.NmbSegments

   Bases:

   hydpy.core.parametertools.SingleParameter

   Number of river segments [-].

   NDIM = 0

   TYPE

      alias of "builtins.int"

   TIME = None

   SPAN = (0, None)

class hydpy.models.hstream.hstream_derived.C1

   Bases:

   hydpy.core.parametertools.SingleParameter

   First coefficient of the muskingum working formula [-].

   NDIM = 0

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, 0.5)

class hydpy.models.hstream.hstream_derived.C2

   Bases:

   hydpy.core.parametertools.SingleParameter

   Second coefficient of the muskingum working formula [-].

   NDIM = 0

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, 1.0)

class hydpy.models.hstream.hstream_derived.C3

   Bases:

   hydpy.core.parametertools.SingleParameter

   Third coefficient of the muskingum working formula [-].

   NDIM = 0

   TYPE

      alias of "builtins.float"

   TIME = None

   SPAN = (0.0, 0.5)

Sequence features

State sequences

class hydpy.models.hstream.hstream_states.StateSequences(seqs, cls_fastaccess=None, cymodel=None)

   Bases:

   hydpy.core.sequencetools.StateSequences

   State sequences of the hstream model.

   The following sequence classes are selected:
      QJoints Runoff at the segment junctions [m³/s].

class hydpy.models.hstream.hstream_states.QJoints

   Bases:

   hydpy.core.sequencetools.StateSequence

   Runoff at the segment junctions [m³/s].

   NDIM = 1

   NUMERIC = False

   SPAN = (0.0, None)

Inlet sequences

class hydpy.models.hstream.hstream_inlets.InletSequences(seqs, cls_fastaccess=None, cymodel=None)

   Bases:

   hydpy.core.sequencetools.LinkSequences

   Upstream link sequences of the hstream model.

   The following sequence classes are selected:
      Q Runoff [m³/s].

class hydpy.models.hstream.hstream_inlets.Q

   Bases:

   hydpy.core.sequencetools.LinkSequence

   Runoff [m³/s].

   NDIM = 0

   NUMERIC = False

Outlet sequences

class hydpy.models.hstream.hstream_outlets.OutletSequences(seqs, cls_fastaccess=None, cymodel=None)

   Bases:

   hydpy.core.sequencetools.LinkSequences

   Downstream link sequences of the hstream model.

   The following sequence classes are selected:
      Q Runoff [m³/s].

class hydpy.models.hstream.hstream_outlets.Q

   Bases:

   hydpy.core.sequencetools.LinkSequence

   Runoff [m³/s].

   NDIM = 0

   NUMERIC = False
