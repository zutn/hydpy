variabletools

This module implements general features for defining and working with
parameters and sequences.

Features more specific to either parameters or sequences are
implemented in modules

parametertools

 and

sequencetools

 respectively.

Module

variabletools

 implements the following members:

   trim() Trim the value(s) of a Variable instance.

   tolerance() Return some sort of "numerical accuracy" to be expected
   for the given floating point value (see method trim()).

   Variable Base class for Parameter and Sequence.


hydpy.core.variabletools.trim(self, lower=None, upper=None)

   Trim the value(s) of a

   Variable

    instance.

   One can pass the lower and/or the upper boundary as a function
   argument.  Otherwise, boundary values are taken from the class
   attribute *SPAN* of the given

   Variable

    instance, if available.

   Note that method

   trim()

    works differently on

   Variable

    instances handling values of different types.  For floating point
   values,

   an actual trimming is performed.  Additionally, a warning message
   is raised if the trimming results in a change in value exceeding
   the threshold value defined by function

   tolerance()

   .  (This warning message can be suppressed by setting the related
   option flag to False.) For integer values, instead of a warning an
   exception is raised.

hydpy.core.variabletools.tolerance(values)

   Return some sort of "numerical accuracy" to be expected for the
   given floating point value (see method

   trim()

   ).

class hydpy.core.variabletools.Variable

   Bases:

   object

   Base class for

   Parameter

    and

   Sequence

   .

   This base class Implements special methods for arithmetic
   calculations, comparisons and type conversions.  See the  following
   exemples on how to do math with HydPys parameter and sequence
   objects.

   The subclasses are required to provide the members *NDIM* (usually
   a class attribute) and *value* (usually a property).  But for
   testing purposes, one can simply add them as instance attributes.

   A few examples for 0-dimensional objects:

   >>> from hydpy.core.variabletools import Variable
   >>> variable = Variable()
   >>> variable.NDIM = 0
   >>> variable.shape = ()
   >>> variable.value = 2.0
   >>> variable + variable
   4.0
   >>> 3.0 - variable
   1.0
   >>> variable /= 2.
   >>> variable
   variable(1.0)

   Similar examples for 1-dimensional objects:

   >>> import numpy
   >>> variable = Variable()
   >>> variable.NDIM = 1
   >>> variable.shape = (3,)
   >>> variable.value = numpy.array([1.0, 2.0, 3.0])
   >>> print(variable + variable)
   [ 2.  4.  6.]
   >>> print(3. - variable)
   [ 2.  1.  0.]
   >>> variable /= 2.
   >>> variable
   variable(0.5, 1.0, 1.5)

   Note that comparisons on

   Variable

    objects containg multiple values return a single boolean only:

   >>> variable.value = numpy.array([1.0, 3.0])
   >>> variable == [0.0, 2.0], variable == [1.0, 2.0], variable == [1.0, 3.0]
   (False, False, True)
   >>> variable != [0.0, 2.0], variable != [1.0, 2.0], variable != [1.0, 3.0]
   (True, True, False)

   While either the *==* or the *!=* operator returns *True* (but not
   both), this must not be the case for the operator pairs *<`and `>=*
   as well as *>* and *<=*:

   >>> variable < 2.0, variable < 3.0, variable < 4.0
   (False, False, True)
   >>> variable <= 2.0, variable <= 3.0, variable <= 4.0
   (False, True, True)
   >>> variable >= 0.0, variable >= 1.0, variable >= 2.0
   (True, True, False)
   >>> variable > 0.0, variable > 1.0, variable > 2.0
   (True, False, False)

   When asking for impossible comparisons, error messages like the
   following are returned:

   >>> variable < [1.0, 2.0, 3.0]   # doctest: +IGNORE_EXCEPTION_DETAIL
   Traceback (most recent call last):
   ...
   ValueError: While trying to compare variable `variable(1.0, 3.0)` of element `?` with object `[1.0, 2.0, 3.0]` of type `list`, the following error occured: operands could not be broadcast together with shapes (2,) (3,)

   >>> variable.NDIM = 0
   >>> variable.value = 1.0
   >>> variable < 'text'   # doctest: +SKIP
   Traceback (most recent call last):
   ...
   TypeError: '<' not supported between instances of 'Variable' and 'str'

   NDIM = None

   value = None

   shape = None

   INIT = None

   NOT_DEEPCOPYABLE_MEMBERS = ()

   name

      Name of the class of the given instance in lower case letters.

      This function is thought to be implemented as a property.
      Otherwise it would violate the principle not to access or
      manipulate private attributes ("_name"):

      >>> from hydpy.core.objecttools import name
      >>> class Test(object):
      ...     name = property(name)
      >>> test1 = Test()
      >>> test1.name
      'test'
      >>> test1._name
      'test'

      The private attribute is added for performance reasons only.
      Note that it is a class attribute:

      >>> test2 = Test()
      >>> test2._name
      'test'

   length

      Total number of all entries of the sequence.

      For 0-dimensional sequences, *length* is always one:

      >>> from hydpy.core.variabletools import Variable
      >>> variable = Variable()
      >>> Variable.NDIM = 0
      >>> variable.length
      1

      For 1-dimensional sequences, it is the vector length:

      >>> Variable.NDIM = 1
      >>> variable.shape = (5,)
      >>> variable.length
      5

      For higher dimensional sequences, the lenghts of the different
      axes of the matrix are multiplied:

      >>> Variable.NDIM = 3
      >>> variable.shape = (2, 1, 4)
      >>> variable.length
      8

   real

   imag

   conjugate()

   commentrepr()

      Returns a list with comments, e.g. for making string
      representations more informative.  When
      *pub.options.reprcomments* is set to "False", an empty list is
      returned.

   repr_(values, islong)
