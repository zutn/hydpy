printtools

This module implements features for printing additional information
and for modifying how information is printed.

Module

printtools

 implements the following members:

   PrintStyle Context manager for changing the colour and font of
   printed output temporarilly.

   print_progress() Decorate a function with printing information when
   its execution starts and ends.

   progressbar() Print a simple progress bar while processing the
   given iterable.


class hydpy.core.printtools.PrintStyle(color, font, file=None)

   Bases:

   object

   Context manager for changing the colour and font of printed output
   temporarilly.

hydpy.core.printtools.print_progress(wrapped, instance, args, kwargs)

   Decorate a function with printing information when its execution
   starts and ends.

hydpy.core.printtools.progressbar(iterable, length=23)

   Print a simple progress bar while processing the given iterable.

   Function

   progressbar()

    does print the progress bar when option *printprogress* is
   activted:

   >>> from hydpy import pub
   >>> pub.options.printprogress = True

   You can pass an iterable object.  Say you want to calculate the the
   sum of all integer values from 1 to 100 and print the progress of
   the calculation.  Using function

   range

    (which returns a list in Python 2 and an iterator in Python3, but
   both are fine), one just has to interpose function

   progressbar()

   :

   >>> from hydpy.core.printtools import progressbar
   >>> x_sum = 0
   >>> for x in progressbar(range(1, 101)):
   ...     x_sum += x
       |---------------------|
       ***********************
   >>> x_sum
   5050

   To prevent possible interim print commands from dismembering the
   status bar, they are delayed until the status bar is complete.  For
   intermediate print outs of each fiftieth calculation, the result
   looks as follows:

   >>> x_sum = 0
   >>> for x in progressbar(range(1, 101)):
   ...     x_sum += x
   ...     if not x % 50:
   ...         print(x, x_sum)
       |---------------------|
       ***********************
   50 1275
   100 5050

   The number of characters of the progress bar can be changed:

   >>> for i in progressbar(range(100), length=50):
   ...     continue
       |------------------------------------------------|
       **************************************************

   But its maximum number of characters is restricted by the length of
   the given iterable:

   >>> for i in progressbar(range(10), length=50):
   ...     continue
       |--------|
       **********

   The smallest possible progress bar has two characters:

   >>> for i in progressbar(range(2)):
   ...     continue
       ||
       **

   For iterables of length one or zero, no progress bar is plottet:

   >>> for i in progressbar(range(1)):
   ...     continue

   The same is True when the *printprogress* option is inactivated:

   >>> pub.options.printprogress = False
   >>> for i in progressbar(range(100)):
   ...     continue
