importtools

This module implements features related to importing models.

The implemented tools are primarily designed hiding model
initialization routines from model users and for allowing writing
readable doctests.

Module

importtools

 implements the following members:

   parameterstep() Define a parameter time step size within a
   parameter control file.

   reverse_model_wildcard_import() Clear the local namespace from a
   model wildcard import.

   prepare_model() Prepare and return the model of the given module.

   simulationstep() Define a simulation time step size for testing
   purposes within a parameter control file.

   controlcheck() no description available


hydpy.core.importtools.parameterstep(timestep=None)

   Define a parameter time step size within a parameter control file.

   Argument:
      timestep(Period): Time step size.

   Function parameterstep should usually be be applied in a line
   immediately behind the model import.  Defining the step size of
   time dependent parameters is a prerequisite to access any model
   specific parameter.

   Note that parameterstep implements some namespace magic by means of
   the module

   inspect

   .  This makes things a little complicated for framework developers,
   but it eases the definition of parameter control files for
   framework users.

hydpy.core.importtools.reverse_model_wildcard_import()

   Clear the local namespace from a model wildcard import.

   Calling this method should remove the critical imports into the
   local namespace due the last wildcard import of a certain
   application model. It is thought for securing the successive
   preperation of different types of models via wildcard imports.  See
   the following example, on how it can be applied.

   >>> from hydpy import reverse_model_wildcard_import

   Assume you wildcard import the first version of HydPy-L-Land (

   lland_v1

   ):

   >>> from hydpy.models.lland_v1 import *

   This for example adds the collection class for handling control
   parameters of *lland_v1* into the local namespace:

   >>> print(ControlParameters(None).name)
   control

   Calling function

   parameterstep()

    for example prepares the control parameter object

   NHRU

   :

   >>> parameterstep('1d')
   >>> nhru
   nhru(-999999)

   Calling function

   reverse_model_wildcard_import()

    removes both objects (and many more, but not all) from the local
   namespace:

   >>> reverse_model_wildcard_import()

   >>> ControlParameters
   Traceback (most recent call last):
   ...
   NameError: name 'ControlParameters' is not defined

   >>> nhru
   Traceback (most recent call last):
   ...
   NameError: name 'nhru' is not defined

hydpy.core.importtools.prepare_model(module, timestep=None)

   Prepare and return the model of the given module.

   In usual HydPy projects, each hydrological model instance is
   prepared in an individual control file.  This allows for
   "polluting" the namespace with different model attributes.  There
   is no danger of name conflicts, as long as no other (wildcard)
   imports are performed.

   However, there are situations when different models are to be
   loaded into the same namespace.  Then it is advisable to use
   function

   prepare_model()

   , which just returns a reference to the model and nothing else.

   See the documentation of

   dam_v001

    on how to apply function

   prepare_model()

    properly.

hydpy.core.importtools.simulationstep(timestep)

   Define a simulation time step size for testing purposes within a
   parameter control file.

   Using

   simulationstep()

    only affects the values of time dependent parameters, when
   *pub.timegrids.stepsize* is not defined.  It thus has no influence
   on usual hydpy simulations at all.  Use it just to check your
   parameter control files.  Write it in a line immediately behind the
   one calling

   parameterstep()

   .

hydpy.core.importtools.controlcheck(controldir='default', projectdir=None, controlfile=None)
